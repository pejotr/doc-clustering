{$A+,B-,D-,E+,F-,G-,I-,L-,N-,O-,R+,S+,V-,X+}
{$M 16384,0,655360}

{ Hard Situation & Constellation GrouP (C) 1991,92 }

program SADMain;

uses

  Crt,       DOS,       Editors,
  Objects,   Drivers,   Views,     Menus,     App,       Memory, Gadgets,
  Dialogs,   SADDlg,    SADMouse,  SADColor,  SADInit,   SADGadg,
  SADMsg,    SADDisk,   SADStrs;


type

  TSADApp = object(TApplication)

              Clock : PClockView;
              Heap : PHeapView;

              constructor Init;
              procedure InitMenuBar; virtual;
              procedure InitStatusLine; virtual;
              procedure InitDesktop; virtual;
              procedure GetEvent(var Event: TEvent); virtual;
              function  GetPalette : PPalette; virtual;
              procedure Idle; virtual;
              procedure HandleEvent(var Event : TEvent ); virtual;
              procedure OutOfMemory; virtual;

            end;

  PSADDesktop = ^TSADDesktop;
  TSADDesktop = object( TDesktop )
             procedure TileError; virtual;
           end;

var
  SADApp : TSADApp;


 procedure TSADApp.OutOfMemory;
 begin
  MessageBox(^C+'Zbyt malo pamieci by wykonac'+#13+^C+'operacje.',
    nil, mfError + mfOkButton);
 end;

 {$F+}
function SADSystemError( ErrorCode : Integer; Drive : Byte): Integer;

var
 DriveString, ErrorString : String;

begin

 if (ScreenMode = smMono) or (ScreenMode = smMono+smFont8x8) then
    TextColor(1) else TextColor (7);

 TextBackGround( 0 );
 LowVideo;

 Inc(Drive, 65);
 DriveString := Chr(Drive);

 ErrorString := ErrorMess[ ErrorCode ];
 if IsDrive[ ErrorCode ] = 1 then ErrorString := ErrorString + DriveString;

 ErrorString := ErrorString +Copy(Spaces80, 1, ScreenWidth-Length(ErrorString)-36) + ' Enter Powtorzenie  Esc Zaniechanie';

 GotoXY( 1, ScreenHeight);

 Write( ErrorString );
 repeat until keypressed;

  if (ReadKey = #0) and (ReadKey = #13) then SADSystemError := 0 else SADSystemError := 1;
  StatusLine^.Draw;
end;

{$F-}


{ TSADApp }
constructor TSADApp.Init;

var
  Event : TEvent;
  R : TRect;

procedure RegisterStreams;

begin
  RegisterType( RCollection );
end;

begin

  TApplication.Init;

  RegisterStreams;

  SysErrorFunc := SADSystemError;

  { Set StartUp Options }

  Event.What := evCommand;
  Event.Command := cmStartUp;
  PutEvent(Event);

  DisableCommands([cmSaveSAD, cmSaveSADAs, cmGoToPos, cmNextPos, cmPrevPos,
                   cmFirstPos, cmLastPos, cmXChg, cmNewPos, cmInsPos, cmDelPos,
                   cmCopyPos, cmGoToField, cmNextField, cmPrevField, cmFirstField,
                   cmLastField, cmCalcSAD, cmPrintSAD, cmPrintSADBis, cmTile, cmCascade, cmList]);

end;



function TSADApp.GetPalette: PPalette;
const
  CNewColor = CColor;
  CNewBlackWhite = CBlackWhite;
  CNewMonochrome = CMonochrome;
  P: array[apColor..apMonochrome] of string[Length(CNewColor)] =
    (CNewColor, CNewBlackWhite, CNewMonochrome);
begin
  GetPalette := @P[AppPalette];
end;

procedure TSADApp.GetEvent(var Event: TEvent);
var
  W: PWindow;
begin
  TApplication.GetEvent(Event);
  case Event.What of
    evMouseDown:
      if Event.Buttons <> 1 then Event.What := evNothing;
  end;
end;

procedure TSADApp.InitDesktop;
var
  R : TRect;

begin
  GetExtent(R);
  R.Grow(0,-1);
  Desktop := New( PSADDesktop, Init(R));
end;

 { Desktop TileError procedure }

procedure TSADDesktop.TileError;
begin

  MessageBox(^C+'Nie moge uporzadkowac okienek.',
             nil, mfError + mfOkButton);
end;

procedure TSADApp.Idle;
begin
  TApplication.Idle;

  Clock^.Update;
  Heap^.Update;

  { if WinCount=0 then DisableCommands([cmSaveSAD, cmSaveSADAs, cmGoToPos, cmNextPos, cmPrevPos,
                   cmFirstPos, cmLastPos, cmXChg, cmNewPos, cmInsPos, cmDelPos,
                   cmCopyPos, cmGoToField, cmNextField, cmPrevField, cmFirstField,
                   cmLastField, cmCalcSAD, cmPrintSAD, cmPrintSADBis, cmTile, cmCascade, cmList]); }

end;

procedure TSADApp.HandleEvent (var Event : TEvent);

procedure StartUp;
const
  CNewColor = CColor;
  CNewBlackWhite = CBlackWhite;
  CNewMonochrome = CMonochrome;

var
  Event : TEvent;
  R : TRect;
  SetLCDPal,LoadedCFG,NoLoadCFG,NoLoadLib : boolean;
  OptR : OptionsRec;

begin

  LowMemSize:= 32000 div 16;
  SetLCDPal := false;
  LCDPal := false;

  MinWinSize.X := 20;
  MinWinSize.Y := 6;

  { Clock }

  GetExtent(R);
  R.A.X := R.B.X - 9; R.B.Y := R.A.Y + 1;
  Clock := New(PClockView, Init(R));
  Insert(Clock);

  { Heap }

  GetExtent(R);
  Dec(R.B.X);
  R.A.X := R.B.X - 9; R.A.Y := R.B.Y - 1;
  Heap := New(PHeapView, Init(R));
  Insert(Heap);


  Desktop^.Draw;
  MenuBar^.Draw;
  StatusLine^.Draw;

  Heap^.Draw;
  Clock^.Draw;

end;

procedure DosShell;
begin
  if FSearch( GetEnv('COMSPEC'),'' ) = '' then
  begin
    MessageBox(^C+'Nie moge znalezc pliku COMMAND.COM',nil,mfError+mfOKButton);
    Exit;
  end;
  DoneSysError;
  DoneEvents;
  DoneVideo;
  DoneMemory;
  SetMemTop(HeapPtr);
  PrintStr('Uzyj polecenia EXIT zeby wrocic do SAD. . .');
  SwapVectors;
  Exec(GetEnv('COMSPEC'), '');
  SwapVectors;
  SetMemTop(HeapEnd);
  InitMemory;
  InitVideo;
  InitEvents;
  InitSysError;
end;


begin

 TApplication.HandleEvent( Event );

 if (Event.What = evCommand) or (Event.What = evBroadcast) then
 begin

   case Event.Command of

     cmStartUp    : StartUp;
     cmShell      : begin
                      DosShell ;
                      Redraw ;
                    end;
     else Exit;
   end;
   ClearEvent( Event );
  end;
end;

procedure TSADApp.InitMenuBar;
var
  R : TRect;
begin
  GetExtent(R);
  R.B.Y := R.A.Y + 1;
  MenuBar := New(PMenuBar, Init(R, NewMenu(
    NewSubMenu('~'#240'~', hcNoContext, NewMenu(
      NewItem('~I~nformacje', '', kbNoKey, cmInfo, hcNoContext,
      NewItem('~W~yjscie', 'Alt-X', kbAltX, cmQuit, hcNoContext,
    nil))),
    NewSubMenu('~A~sortyment', hcNoContext, NewMenu(

    nil),
    NewSubMenu('~R~achunki', hcNoContext, NewMenu(
    nil),
  nil))))));
end;

procedure TSADApp.InitStatusLine;
var
  R : TRect;
begin
  GetExtent(R);
  R.A.Y := R.B.Y - 1;
  StatusLine := New(PStatusLine, Init(R,
    NewStatusDef(0, $FFFF,
      NewStatusKey('~F10~ Menu', kbF10, cmMenu,
    nil),
  nil)));
end;

{ Main }
begin
  SADApp.Init;
  SADApp.Run;
  SADApp.Done;
end.