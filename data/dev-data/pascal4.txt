unit HSProc;

{ Hard Situation 1991,92 }

{ Last changed: 28-10-1992 }

interface

uses
  Crt,Dos,Graph;

type
  TMemo = array [1..2000] of char;
  TAttrLine = array[1..80] of byte;

const
  ScreenBase : word = $B800;

var
  Spaces80             : string;
  Driver,Mode          : integer;
  CSInsBeg,CSInsEnd,
  CSOvrBeg,CSOvrEnd,
  CSOffBeg,CSOffEnd,
  CSLstBeg,CSLstEnd,
  IntroScreenMode,
  IntroTextAttr        : byte;

function GetCurPos : word;
procedure GetCurSize ( var BegCur,EndCur : byte);
procedure SetCurPos (PosX,PosY : byte);
procedure SetCurSize (BegCur,EndCur : byte);
procedure SetCursorConstants;

function PosLastChar(EdText : string; C : char) : byte;
procedure CutFirstChars(var EdText : string; C : char);
procedure CutLastChars(var EdText : string; C : char);
procedure SetCharsToOne(var EdText : string; C : char);
procedure CutEveryChar(var EdText : string; C : char);

procedure FillString(var S : string; Count : byte; C : char);
function UpCaseStr( S : string ) : string;

function StrRight ( Len : byte; S : string ) : string;
function StrNum ( Num : longint ) : string;
function StrNumLen(Len : byte; Num : longint) : string;
function StrNum0(Len : byte; Num : longint) : string;
function NumberCorrect(EdNum : string; BfrCom,AftCom : byte) : boolean;
procedure ConvertToDeclared(var EdNum : string; BfrCom,AftCom : byte);

function ReducedPath(EdPath : PathStr; MaxLen: byte) : string;
function BankFormat ( iS : string ) : string;

procedure ScrollUp(X1,Y1,X2,Y2,Count,Attr : byte);
procedure ScrollDown(X1,Y1,X2,Y2,Count,Attr : byte);
procedure ColorLine(X1,X2,Y,Attr : byte);
procedure SetSaveLine(X1,X2,Y,Attr : byte;
                      var L : TAttrLine);
procedure RestoreLine(X1,X2,Y : byte;
                      L : TAttrLine);

procedure WaitAndReadKey(var Key : char; var Special : boolean);
procedure WaitForKey;
procedure WaitForEsc;

procedure ClearMemo(var hField : TMemo);
procedure MoveMemo(F1 : TMemo; var F2 : TMemo);
function PosXMemo(hEPos : word; hDX : byte) : byte;
function PosYMemo(hEPos : word; hDX : byte) : byte;
function StrMemo(hField : TMemo; LLen,LNum : byte) : string;
function LastInMemo(hField : TMemo) : word;
procedure InsertCharMemo(var hField : TMemo; From : word; C : char);
procedure InsertSpacesMemo(var hField : TMemo; From,Count : word);
procedure DeleteWordMemo(var hField : TMemo; From,Count : word);
procedure WriteMemo(hField : TMemo; hFrom,hTo : word; X,Y,DX,DY : byte);

implementation

function GetCurPos : word;
var
  Regs : Registers;
begin
  Regs.AH:=$03;
  Regs.BH:=0; { side number }
  Intr($10,Regs);
  Inc(Regs.DH);
  Inc(Regs.DL);
  GetCurPos:=Regs.DX
end;

procedure GetCurSize;
var
  Regs : Registers;
begin
  Regs.AH:=$03;
  Regs.BH:=0; { side number }
  Intr($10,Regs);
  BegCur:=Hi(Regs.CX);
  EndCur:=Lo(Regs.CX)
end;

procedure SetCurPos;
var
  Regs : Registers;
begin
  Regs.AH:=$02;
  Regs.BH:=0; { side number }
  Regs.DX:=(PosY-1)*256+(PosX-1);
  Intr($10,Regs);
end;

procedure SetCurSize;
var
  Regs : Registers;
begin
  Regs.AH:=$01;
  Regs.BH:=0; { side number }
  Regs.CX:=BegCur*256+EndCur;
  Intr($10,Regs);
end;

procedure SetCursorConstants;
begin
  DetectGraph(Driver,Mode);
  case Driver of
    HercMono : begin
            ScreenBase:=$B000;
	    CSInsBeg:=12;
	    CSInsEnd:=13;
	    CSOvrBeg:=0;
	    CSOvrEnd:=13;
	    CSOffBeg:=15;
	    CSOffEnd:=0;
	  end;
    EGA,EGAMono,VGA : begin
	    CSInsBeg:=13;
	    CSInsEnd:=14;
	    CSOvrBeg:= 0;
	    CSOvrEnd:=14;
	    CSOffBeg:=14;
	    CSOffEnd:= 0;
	  end
    else
    begin
      CSInsBeg:=6;
      CSInsEnd:=7;
      CSOvrBeg:=0;
      CSOvrEnd:=7;
      CSOffBeg:=8;
      CSOffEnd:=0;
    end
  end
end;

function ReducedPath(EdPath : PathStr; MaxLen: byte) : string;
var
  Ps : byte;
  NewPath : PathStr;
  D : DirStr;
  N : NameStr;
  E : ExtStr;

function PosNextSlash : byte;
var
  Cnt : byte;
begin
  Cnt:=8;
  while (Cnt<Length(NewPath)) and (NewPath[Cnt]<>'\') do Inc(Cnt);
  if Cnt=Length(NewPath) then Cnt:=0;
  PosNextSlash:=Cnt;
end;

begin
  ReducedPath:=EdPath;
  if MaxLen<14 then begin ReducedPath:=''; Exit end;
  if Length(EdPath)<=MaxLen then Exit;
  NewPath:=EdPath;
  Insert('\...',NewPath,3);
  repeat
    Ps:=PosNextSlash;
    if Ps<>0 then Delete(NewPath,8,Ps-7)
      else
    if Length(NewPath)>MaxLen then
    begin
      FSplit(EdPath,D,N,E);
      ReducedPath:=Copy(D,1,2)+N+E;
      Exit
    end
  until Length(NewPath)<MaxLen;
  ReducedPath:=NewPath;
end;

function AphNumStr( NumStr : string; HN : byte ) : string;
var
  N : byte;
  S1,S2 : string;
begin
  if NumStr='' then
  begin
    AphNumStr:=Copy(Spaces80,1,HN*4+2)+'0';
    Exit
  end;
  S1:=NumStr;
  S2:='';
  for N:=0 to HN do
  begin
    S2:=S2+Copy(S1,N*3+1,3);
    if (N<>HN) and (S1[N*3+3]<>' ') then S2:=S2+''''
  end;
  CutFirstChars(S2,' ');
  S2:=Copy(Spaces80,1,4*HN+3-Length(S2))+S2;
  AphNumStr:=S2
end;


procedure ScrollUp(X1,Y1,X2,Y2,Count,Attr : byte);
var
  Regs : registers;
begin
  with Regs do
  begin
    AH:=$06;
    AL:=Count;
    BH:=Attr;
    CH:=Y1-1;
    CL:=X1-1;
    DH:=Y2-1;
    DL:=X2-1;
    Intr($10,Regs)
  end
end;

procedure ScrollDown(X1,Y1,X2,Y2,Count,Attr : byte);
var
  Regs : registers;
begin
  with Regs do
  begin
    AH:=$07;
    AL:=Count;
    BH:=Attr;
    CH:=Y1-1;
    CL:=X1-1;
    DH:=Y2-1;
    DL:=X2-1;
    Intr($10,Regs)
  end
end;

procedure ColorLine(X1,X2,Y,Attr : byte);
var
  Base,YCoord : word;
  hX1,hX2,N : byte;
begin
  hX1:=Lo(WindMin)+X1;
  hX2:=Lo(WindMin)+X2;
  YCoord:=(Hi(WindMin)+Y-1)*80-1;
  for N:=hX1 to hX2 do Mem[ScreenBase:YCoord+YCoord+N+N+1]:=Attr;
end;

procedure SetSaveLine(X1,X2,Y,Attr : byte;
                      var L : TAttrLine);
var
  Base,YCoord : word;
  hX1,hX2,N : byte;
begin
  hX1:=Lo(WindMin)+X1;
  hX2:=Lo(WindMin)+X2;
  YCoord:=(Hi(WindMin)+Y-1)*80-1;
  for N:=hX1 to hX2 do
  begin
    L[N-hX1+1]:=Mem[ScreenBase:YCoord+YCoord+N+N+1];
    Mem[ScreenBase:YCoord+YCoord+N+N+1]:=Attr;
  end
end;

procedure RestoreLine(X1,X2,Y : byte;
                      L : TAttrLine);
var
  Base,YCoord : word;
  hX1,hX2,N : byte;
begin
  hX1:=Lo(WindMin)+X1;
  hX2:=Lo(WindMin)+X2;
  YCoord:=(Hi(WindMin)+Y-1)*80-1;
  for N:=hX1 to hX2 do Mem[ScreenBase:YCoord+YCoord+N+N+1]:=L[N-hX1+1];
end;


procedure WaitAndReadKey(var Key : char; var Special : boolean);
var
  hlpKey : char;
begin
  Special:=false;
  repeat until Keypressed;
  Key:=ReadKey;
  if Key=#0 then begin Key:=ReadKey; Special:=true end;
  while Keypressed do hlpKey:=ReadKey;
end;

procedure WaitForKey;
var
  hlpKey : char;
begin
  repeat until Keypressed;
  while Keypressed do hlpKey:=ReadKey;
end;

procedure WaitForEsc;
var
  Key : char;
  Special : boolean;
begin
  repeat
    WaitAndReadKey(Key,Special);
  until not Special and (Key=#27)
end;

procedure ClearMemo(var hField : TMemo);
begin
  FillChar(hField,SizeOf(TMemo),' ');
end;

procedure MoveMemo(F1 : TMemo; var F2 : TMemo);
begin
  Move(F1,F2,SizeOf(TMemo));
end;

function PosXMemo(hEPos : word; hDX : byte) : byte;
var
  H : byte;
begin
  H:=hEPos mod hDX;
  if H=0 then H:=hDX;
  PosXMemo:=H
end;

function PosYMemo(hEPos : word; hDX : byte) : byte;
begin
  PosYMemo:=(hEPos-1) div hDX + 1;
end;

function StrMemo(hField : TMemo; LLen,LNum : byte) : string;
var
  I,N : word;
  S : string;
begin
  I:=LLen*(LNum-1)+1;
  S[0]:=Chr(Ord(LLen));
  for N:=I to I+LLen-1 do S[N-I+1]:=hField[N];
  StrMemo:=S;
end;

function LastInMemo(hField : TMemo) : word;
var
  N : word;
begin
  LastInMemo:=0;
  for N:=SizeOf(TMemo) downto 1 do
    if hField[N]<>' ' then
    begin
      LastInMemo:=N;
      Exit
    end
end;

procedure InsertCharMemo(var hField : TMemo; From : word; C : char);
var
  N : word;
begin
  for N:=LastInMemo(hField) downto From do hField[N+1]:=hField[N];
  hField[From]:=C;
end;

procedure InsertSpacesMemo(var hField : TMemo; From,Count : word);
var
  N : word;
begin
  for N:=LastInMemo(hField) downto From do hField[N+Count]:=hField[N];
  for N:=From to From+Count-1 do hField[N]:=' ';
end;

procedure DeleteWordMemo(var hField : TMemo; From,Count : word);
var
  N,L : word;
begin
  L:=LastInMemo(hField);
  if (L=0) or (Count=0) then Exit;
  for N:=From+Count to SizeOf(TMemo) do hField[N-Count]:=hField[N];
  for N:=SizeOf(TMemo) downto SizeOf(TMemo)-Count+1 do hField[N]:=' ';
end;

procedure WriteMemo(hField : TMemo; hFrom,hTo : word; X,Y,DX,DY : byte);
var
  N,X1,X2,Y1,Y2 : byte;
begin
  if hFrom>hTo then Exit;
  X1:=PosXMemo(hFrom,DX);
  Y1:=PosYMemo(hFrom,DX);
  X2:=PosXMemo(hTo,DX);
  Y2:=PosYMemo(hTo,DX);
  GotoXY(X+X1-1,Y+Y1-1);
  if Y1=Y2 then  { this same line }
  begin
    Write(Copy(StrMemo(hField,DX,Y1),X1,X2-X1+1));
    Exit
  end;
  Write(Copy(StrMemo(hField,DX,Y1),X1,DX-X1+1));
  for N:=Y1+1 to Y2-1 do
  begin
    GotoXY(X,Y+N-1);
    Write(StrMemo(hField,DX,N))
  end;
  GotoXY(X,Y+Y2-1);
  Write(Copy(StrMemo(hField,DX,Y2),1,X2))
end;

function PosLastChar(EdText : string; C : char) : byte;
var
  Count : byte;
begin
  Count:=Length(EdText);
  while (Count>1) and (EdText[Count]=C) do Dec(Count);
  if EdText[Count]=C then Dec(Count);
  PosLastChar:=Count
end;

procedure CutFirstChars(var EdText : string; C : char);
var
  Count : byte;
begin
  Count:=1;
  while (Count<Length(EdText)) and (EdText[Count]=C) do Inc(Count);
  Delete(EdText,1,Count-1);
  if EdText=C then EdText:=''
end;

procedure CutLastChars(var EdText : string; C : char);
begin
  Delete(EdText,PosLastChar(EdText,C)+1,255)
end;

procedure SetCharsToOne(var EdText : string; C : char);
var
  Count : byte;
  InsText : string;
begin
  CutLastChars(EdText,C);
  Count:=1;
  repeat
    if EdText[Count]=C then
    begin
      InsText:=Copy(EdText,Count,255);
      CutFirstChars(InsText,C);
      Delete(EdText,Count,255);
      EdText:=EdText+C+InsText
    end;
    Inc(Count);
  until Count>Length(EdText);
  CutFirstChars(EdText,C);
end;

procedure CutEveryChar(var EdText : string; C : char);
var
  Count : byte;
  InsText : string;
begin
  CutLastChars(EdText,C);
  Count:=1;
  repeat
    if EdText[Count]=C then
    begin
      InsText:=Copy(EdText,Count,255);
      CutFirstChars(InsText,C);
      Delete(EdText,Count,255);
      EdText:=EdText+InsText
    end;
    Inc(Count);
  until Count>Length(EdText);
  CutFirstChars(EdText,C);
end;

function BankFormat ( iS : string ) : string;
var
  S : string;
  L,N : byte;

begin

  CutFirstChars
  ( iS , ' ' );
  CutFirstChars ( iS , '0' );

  L := Length ( iS );

  S := '';

  if L mod 3 <> 0 then
  begin

    iS := StrRight ( ( L div 3 + 1 ) * 3 , iS );
    L := Length ( iS );

  end;

  for N := 1 to L do
  begin

    S := S + iS[N];
    if ( N mod 3 = 0 ) and ( N <> L ) then S := S + '''';

  end;

  CutFirstChars ( S , ' ' );
  BankFormat := S;

end;

procedure FillString(var S : string; Count : byte; C : char);
begin
  FillChar(S,Count+1,C);
  S[0]:=Chr(Count)
end;

function UpCaseStr;
var
  N : byte;
  C : char;
begin
  for N:=1 to Length(S) do
  begin
    C:=S[N];
    S[N]:=UpCase(C)
  end;
  UpCaseStr:=S
end;

function StrRight ( Len : byte; S : string ) : string;
begin
  StrRight:=Copy(Spaces80,1,Len-Length(S))+S;
end;

function StrNum ( Num : longint ) : string;
var
  S : string;
begin
  Str(Num,S);
  StrNum:=S;
end;

function StrNumLen(Len : byte; Num : longint) : string;
var
  S : string;
begin
  Str(Num:Len,S);
  StrNumLen:=S;
end;

function StrNum0(Len : byte; Num : longint) : string;
var
  S : string;
begin
  if Num<>0 then
  begin
    Str(Num:Len,S);
    StrNum0:=S;
  end
    else StrNum0:=Copy(Spaces80,1,Len)
end;

function NumberCorrect(EdNum : string; BfrCom,AftCom : byte) : boolean;
var
  NoCom : boolean;
  N : byte;
begin
  NumberCorrect:=true;
  for N:=1 to Length(EdNum) do
    if not (EdNum[N] in ['0'..'9','.']) then NumberCorrect:=false;
  if AftCom=0 then NoCom:=true else NoCom:=false;
  CutFirstChars(EdNum,'0');
  CutEveryChar(EdNum,' ');
  if Pos('.',EdNum)<>0 then CutLastChars(EdNum,'0');
  if (Pos('.',EdNum)=0) and not NoCom then EdNum:=EdNum+'.';
  if not NoCom and ((BfrCom<Pos('.',EdNum)-1) or (AftCom<Length(EdNum)-Pos('.',EdNum))) then NumberCorrect:=false;
  if NoCom and (Length(EdNum) > BfrCom) then NumberCorrect:=false;
end;

procedure ConvertToDeclared(var EdNum : string; BfrCom,AftCom : byte);
var
  NoCom : boolean;
  HlpStr : string;
begin
  if AftCom=0 then NoCom:=true else NoCom:=false;
  CutFirstChars(EdNum,'0');
  CutLastChars(EdNum,' ');
  if Pos('.',EdNum)<>0 then CutLastChars(EdNum,'0');
  if (Pos('.',EdNum)=0) and not NoCom then EdNum:=EdNum+'.';
  if not NoCom then
  begin
    if Pos('.',EdNum)=1 then EdNum:='0'+EdNum; { *** First char is '.' *** }
    if AftCom>Length(EdNum)-Pos('.',EdNum) then { *** Last char is '.' *** }
    begin
      FillString(HlpStr,AftCom-(Length(EdNum)-Pos('.',EdNum)),'0');
      EdNum:=EdNum+HlpStr
    end;
  end
    else
      if EdNum='' then EdNum:='0';
  CutEveryChar(EdNum,' ');
end;

begin
  IntroScreenMode:=LastMode;
  IntroTextAttr:=TextAttr;
  GetCurSize(CSLstBeg,CSLstEnd);
  SetCursorConstants;
  FillString(Spaces80,80,' ');
end.